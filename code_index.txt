MIND THE CAT - COMPLETE CODE INDEX
=====================================

INDEX.HTML:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Mind the Cat</title>
    <link rel="stylesheet" href="style.css" />
</head>

<body>
    <main>
        <div id="login-view" class="view">
            <h1>Mind the Cat üê±</h1>
            <button id="login-btn">Sign in with Google</button>
        </div>

        <div id="groups-view" class="view" style="display: none;">
            <h2>Select or Create a Group</h2>
            <button id="logout-btn">Log out</button>
            <p id="user-info"></p>

            <div id="group-setup">
                <input type="text" id="group-id-input" placeholder="Enter group ID" />
                <button id="create-group-btn">Create Group</button>
                <button id="join-group-btn">Join Group</button>
            </div>

            <div id="group-list-container" style="margin-top: 20px;">
                <h3>Your Groups:</h3>
                <div id="group-list"></div>
            </div>
        </div>

        <div id="chores-view" class="view" style="display: none;">
            <h2>Chores for <span id="current-group-label">No group selected</span></h2>
            <button id="back-to-groups">‚Üê Back to Groups</button>

            <div id="chore-creation" style="margin-top: 20px;">
                <input type="text" id="new-chore-name" placeholder="Enter chore name" />
                <button id="create-chore-btn">Create Chore</button>
            </div>

            <div id="invite-member" style="margin-top: 30px; display: none;">
                <h3>Invite Member</h3>
                <input type="text" id="invite-user-id" placeholder="User ID or Email" />
                <label><input type="checkbox" id="invite-as-admin" /> Admin</label>
                <button id="invite-btn">Invite</button>
            </div>

            <div id="member-list" style="margin-top: 30px;">
                <h3>Members</h3>
                <ul id="member-list-ul"></ul>
            </div>

            <div id="chore-list" style="margin-top: 20px;"></div>
        </div>
    </main>

    <script type="module" src="auth.js"></script>
    <script type="module" src="group.js"></script>
    <script type="module" src="script.js"></script>
</body>

</html>

=====================================

SCRIPT.JS:
import { createChore, markChoreDone, loadChores, deleteChore } from "./chores.js";
import { createGroup, deleteGroup } from "./group.js";

function showView(viewId) {
    document.querySelectorAll(".view").forEach(div => {
        div.style.display = div.id === viewId ? "block" : "none";
    });
}

document.addEventListener("group-ready", (e) => {
    const groupId = e.detail;
    loadChores(groupId, renderChores);

    const userId = window.currentUser?.uid;
    import("./group.js").then(({ isUserAdmin }) => {
        isUserAdmin(groupId, userId).then(isAdmin => {
            document.getElementById("invite-member").style.display = isAdmin ? "block" : "none";
        });
    });

    import("./group.js").then(({ loadMembers }) => {
        loadMembers(groupId, renderMembers);
    });
});

document.getElementById("create-chore-btn").addEventListener("click", () => {
    const choreName = document.getElementById("new-chore-name").value.trim();
    const groupId = localStorage.getItem("groupId");

    if (!choreName || !groupId) {
        alert("Enter a chore name and select a group first.");
        return;
    }

    createChore(groupId, choreName)
        .then(() => {
            loadChores(groupId, renderChores);
            document.getElementById("new-chore-name").value = "";
        })
        .catch(err => console.error("Failed to create chore:", err));
});

document.getElementById("create-group-btn").addEventListener("click", async () => {
    const groupId = document.getElementById("group-id-input").value.trim();

    if (!groupId) {
        alert("Please enter a group ID.");
        return;
    }

    try {
        await createGroup(groupId, groupId);
        alert(`Group "${groupId}" created!`);

        const userId = window.currentUser?.uid;
        if (userId) {
            import("./group.js").then(({ loadUserGroups }) => {
                loadUserGroups(userId, renderGroupList);
            });
        }

        document.getElementById("group-id-input").value = "";
    } catch (err) {
        alert("Failed to create group: " + err.message);
        console.error(err);
    }
});

function renderChores(chores) {
    const container = document.getElementById("chore-list");
    container.innerHTML = "";

    if (chores.length === 0) {
        container.textContent = "No chores yet.";
        return;
    }

    const userId = window.currentUser?.uid;
    const groupId = localStorage.getItem("groupId");

    import("./group.js").then(({ isUserAdmin }) => {
        isUserAdmin(groupId, userId).then(isAdmin => {
            console.log("üëë Admin check for user", userId, "in group", groupId, ":", isAdmin);
            console.log("üë§ Current user object:", window.currentUser);
            
            chores.forEach(chore => {
                const div = document.createElement("div");
                div.className = "chore";

                const lastDoneText = chore.lastDone
                    ? new Date(chore.lastDone.seconds * 1000).toLocaleString()
                    : "Never";

                div.innerHTML = `
                    <p>${chore.name}<br/>
                    <small>Last done: ${lastDoneText}</small></p>
                    <button class="mark-done-btn" data-chore-id="${chore.id}">Mark Done</button>
                    ${isAdmin ? `<button class="delete-chore-btn" data-chore-id="${chore.id}">üóëÔ∏è Delete</button>` : ""}
                `;

                div.querySelector(".mark-done-btn").addEventListener("click", () => {
                    const user = window.currentUser;
                    if (!user) return alert("Login first.");

                    import("./chores.js").then(({ markChoreDone, loadChores }) => {
                        markChoreDone(groupId, chore.id, user)
                            .then(() => loadChores(groupId, renderChores));
                    });
                });

                if (isAdmin) {
                    const deleteBtn = div.querySelector(".delete-chore-btn");
                    if (deleteBtn) {
                        console.log("üîò Delete button found for chore:", chore.id);
                        deleteBtn.addEventListener("click", () => {
                            console.log("üóëÔ∏è Delete button clicked for chore:", chore.id);
                            console.log("Current user:", window.currentUser?.uid);
                            console.log("Group ID:", groupId);
                            console.log("Chore ID:", chore.id);

                            if (confirm("Delete this chore?")) {
                                console.log("‚úÖ User confirmed deletion");
                                console.log("üì¶ Using imported deleteChore function...");
                                deleteChore(groupId, chore.id)
                                    .then(() => {
                                        console.log("‚úÖ Chore deleted successfully");
                                        return loadChores(groupId, renderChores);
                                    })
                                    .catch(err => {
                                        console.error("‚ùå Error deleting chore:", err);
                                        alert("Failed to delete chore: " + err.message);
                                    });
                            } else {
                                console.log("‚ùå User cancelled deletion");
                            }
                        });
                    } else {
                        console.error("‚ùå Delete button not found for chore:", chore.id);
                    }
                } else {
                    console.log("üö´ User is not admin, no delete button for chore:", chore.id);
                }

                container.appendChild(div);
            });
        }).catch(err => {
            console.error("‚ùå Error checking admin status:", err);
        });
    });
}

document.getElementById("back-to-groups").addEventListener("click", () => {
    showView("groups-view");
});

document.getElementById("invite-btn").addEventListener("click", () => {
    const userId = document.getElementById("invite-user-id").value.trim();
    const isAdmin = document.getElementById("invite-as-admin").checked;
    const groupId = localStorage.getItem("groupId");

    if (!userId || !groupId) return alert("User ID and group required.");

    import("./group.js").then(({ inviteMember }) => {
        inviteMember(groupId, userId, isAdmin)
            .then(() => alert("Member invited!"))
            .catch(err => alert("Failed: " + err.message));
    });
});

function renderMembers(memberEntries) {
    const ul = document.getElementById("member-list-ul");
    ul.innerHTML = "";

    memberEntries.forEach(([uid, info]) => {
        const li = document.createElement("li");
        li.textContent = `${info.displayName || uid}${info.isAdmin ? " (Admin)" : ""}`;
        ul.appendChild(li);
    });
}

document.addEventListener("user-ready", (e) => {
    const user = e.detail;

    import("./group.js").then(({ loadUserGroups }) => {
        loadUserGroups(user.uid, renderGroupList);
    });
});

function renderGroupList(groups) {
    const container = document.getElementById("group-list");
    container.innerHTML = "";

    if (groups.length === 0) {
        container.textContent = "No groups joined yet.";
        return;
    }

    console.log("üé® Rendering groups:", groups);

    groups.forEach(group => {
        const groupCard = document.createElement("div");
        groupCard.className = "chore group-entry";
        
        const userId = user.uid;
        const isAdmin = group.admins && group.admins[userId];
        
        groupCard.innerHTML = `
            <p>${group.name}<br/>
            <small>${isAdmin ? "üëë Admin" : "üë§ Member"}</small></p>
            ${isAdmin ? `<button class="delete-group-btn" data-group-id="${group.id}">üóëÔ∏è Delete Group</button>` : ""}
        `;
        
        console.log("üé® Created group card:", groupCard);
        console.log("üé® Group card classes:", groupCard.className);
        console.log("üé® Group card computed styles:", window.getComputedStyle(groupCard));

        groupCard.addEventListener("click", (e) => {
            if (e.target.classList.contains('delete-group-btn')) {
                return;
            }
            
            localStorage.setItem("groupId", group.id);
            document.getElementById("current-group-label").textContent = group.name;
            document.dispatchEvent(new CustomEvent("group-ready", { detail: group.id }));
            showView("chores-view");
        });

        if (isAdmin) {
            const deleteBtn = groupCard.querySelector(".delete-group-btn");
            if (deleteBtn) {
                console.log("üîò Delete group button found for group:", group.id);
                deleteBtn.addEventListener("click", (e) => {
                    e.stopPropagation();
                    console.log("üóëÔ∏è Delete group button clicked for group:", group.id);
                    console.log("Current user:", window.currentUser?.uid);
                    console.log("Group ID:", group.id);

                    if (confirm(`Are you sure you want to delete the group "${group.name}"? This action cannot be undone.`)) {
                        console.log("‚úÖ User confirmed group deletion");
                        deleteGroup(group.id)
                            .then(() => {
                                console.log("‚úÖ Group deleted successfully");
                                const userId = window.currentUser?.uid;
                                if (userId) {
                                    import("./group.js").then(({ loadUserGroups }) => {
                                        loadUserGroups(userId, renderGroupList);
                                    });
                                }
                            })
                            .catch(err => {
                                console.error("‚ùå Error deleting group:", err);
                                alert("Failed to delete group: " + err.message);
                            });
                    } else {
                        console.log("‚ùå User cancelled group deletion");
                    }
                });
            } else {
                console.error("‚ùå Delete group button not found for group:", group.id);
            }
        }

        container.appendChild(groupCard);
    });
}

function testFirebasePermissions() {
    const groupId = localStorage.getItem("groupId");
    const userId = window.currentUser?.uid;
    
    console.log("üß™ Testing Firebase permissions...");
    console.log("Group ID:", groupId);
    console.log("User ID:", userId);
    
    if (!groupId || !userId) {
        console.error("‚ùå Missing group ID or user ID");
        return;
    }
    
    import("./group.js").then(({ isUserAdmin }) => {
        isUserAdmin(groupId, userId).then(isAdmin => {
            console.log("üß™ Admin test result:", isAdmin);
        }).catch(err => {
            console.error("‚ùå Admin test failed:", err);
        });
    });
}

document.addEventListener("DOMContentLoaded", () => {
    const testBtn = document.createElement("button");
    testBtn.textContent = "üß™ Test Permissions";
    testBtn.style.position = "fixed";
    testBtn.style.top = "10px";
    testBtn.style.right = "10px";
    testBtn.style.zIndex = "1000";
    testBtn.addEventListener("click", testFirebasePermissions);
    document.body.appendChild(testBtn);
});

=====================================

AUTH.JS:
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

const firebaseConfig = {
    apiKey: "AIzaSyCHpFshdCJ7eer8adXGp3pBoMcFs8TOhVU",
    authDomain: "mindthecat-59b98.firebaseapp.com",
    projectId: "mindthecat-59b98",
    storageBucket: "mindthecat-59b98.firebasestorage.app",
    messagingSenderId: "493425096678",
    appId: "1:493425096678:web:6e59c43655f3abe20e0827",
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const provider = new GoogleAuthProvider();

function showView(viewId) {
    document.querySelectorAll(".view").forEach(div => {
        div.style.display = div.id === viewId ? "block" : "none";
    });
}

document.getElementById("login-btn").addEventListener("click", () => {
    signInWithPopup(auth, provider)
        .then(result => {
            const user = result.user;
            window.currentUser = user;
            document.dispatchEvent(new CustomEvent("user-ready", { detail: user }));
        })
        .catch(err => {
            alert("Login failed: " + err.message);
        });
});

document.getElementById("logout-btn").addEventListener("click", () => {
    signOut(auth).then(() => {
        showView("login-view");
    });
});

onAuthStateChanged(auth, user => {
    if (user) {
        window.currentUser = user;
        document.dispatchEvent(new CustomEvent("user-ready", { detail: user }));
    } else {
        showView("login-view");
    }
});

document.addEventListener("user-ready", e => {
    const user = e.detail;
    document.getElementById("user-info").textContent = `Logged in as ${user.displayName}`;
    showView("groups-view");

    console.log("üîÅ Loading groups for user:", user.uid);

    import("./group.js").then(({ loadUserGroups }) => {
        loadUserGroups(user.uid, groups => {
            console.log("üì¶ Groups found:", groups);
            const list = document.getElementById("group-list");
            list.innerHTML = "";

            if (groups.length === 0) {
                list.textContent = "You're not in any groups.";
                return;
            }

            groups.forEach(group => {
                const groupCard = document.createElement("div");
                groupCard.textContent = group.name || group.id;
                groupCard.className = "group-entry";

                groupCard.addEventListener("click", () => {
                    localStorage.setItem("groupId", group.id);
                    document.getElementById("current-group-label").textContent = group.name || group.id;
                    document.dispatchEvent(new CustomEvent("group-ready", { detail: group.id }));
                    showView("chores-view");
                });

                list.appendChild(groupCard);
            });
        });
    });
});

=====================================

CHORES.JS:
import { getFirestore, collection, serverTimestamp, updateDoc, getDocs, addDoc, doc, deleteDoc, getDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

const db = getFirestore();

export async function createChore(groupId, choreName) {
    const choresRef = collection(db, "groups", groupId, "chores");
    await addDoc(choresRef, {
        name: choreName,
        lastDone: null,
        doneBy: null
    });
}

export async function markChoreDone(groupId, choreId, user) {
    const choreRef = doc(db, "groups", groupId, "chores", choreId);
    await updateDoc(choreRef, {
        lastDone: serverTimestamp(),
        doneBy: {
            uid: user.uid,
            displayName: user.displayName
        }
    });
}

export async function deleteChore(groupId, choreId) {
    console.log("üîß deleteChore called with:", { groupId, choreId });
    
    if (!groupId || !choreId) {
        console.error("‚ùå Invalid parameters:", { groupId, choreId });
        throw new Error("Invalid group ID or chore ID");
    }
    
    const choreRef = doc(db, "groups", groupId, "chores", choreId);
    console.log("üìÑ Chore reference path:", choreRef.path);
    
    try {
        const docSnap = await getDoc(choreRef);
        if (!docSnap.exists()) {
            console.error("‚ùå Chore document does not exist:", choreRef.path);
            throw new Error("Chore not found");
        }
        console.log("‚úÖ Chore document exists, proceeding with deletion...");
        
        await deleteDoc(choreRef);
        console.log("‚úÖ Chore document deleted successfully");
    } catch (error) {
        console.error("‚ùå Error in deleteChore:", error);
        console.error("‚ùå Error code:", error.code);
        console.error("‚ùå Error message:", error.message);
        throw error;
    }
}

export async function loadChores(groupId, renderFn) {
    const choresSnap = await getDocs(collection(db, "groups", groupId, "chores"));
    const chores = [];
    choresSnap.forEach(doc => {
        chores.push({
            id: doc.id,
            ...doc.data()
        });
    });
    renderFn(chores);
}

=====================================

GROUP.JS:
import { getFirestore, doc, setDoc, serverTimestamp, getDoc, updateDoc, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

const db = getFirestore();

export async function createGroup(groupId, groupName) {
    const user = getAuth().currentUser;
    if (!user) throw new Error("User not logged in");

    await setDoc(doc(db, "groups", groupId), {
        name: groupName,
        createdAt: serverTimestamp(),
        admins: { [user.uid]: true },
        members: {
            [user.uid]: {
                displayName: user.displayName,
                isAdmin: true,
            },
        },
    });

    localStorage.setItem("groupId", groupId);
    document.dispatchEvent(new CustomEvent("group-ready", { detail: groupId }));
}

export async function isUserAdmin(groupId, userId) {
    const groupSnap = await getDoc(doc(db, "groups", groupId));
    if (!groupSnap.exists()) return false;
    const data = groupSnap.data();
    return !!data.admins?.[userId];
}

export async function inviteMember(groupId, userId, isAdmin = false, displayName = "Unnamed") {
    const groupRef = doc(db, "groups", groupId);

    const update = {
        [`members.${userId}`]: {
            displayName,
            isAdmin
        }
    };

    if (isAdmin) {
        update[`admins.${userId}`] = true;
    }

    await updateDoc(groupRef, update);
}

export async function loadMembers(groupId, callback) {
    const groupSnap = await getDoc(doc(db, "groups", groupId));
    if (!groupSnap.exists()) return;
    const members = groupSnap.data().members || {};
    callback(Object.entries(members));
}

export async function loadUserGroups(userId, callback) {
    const groupsRef = collection(db, "groups");
    const snapshot = await getDocs(groupsRef);
    const userGroups = [];

    snapshot.forEach(docSnap => {
        const data = docSnap.data();
        if (data.members && data.members[userId]) {
            userGroups.push({ id: docSnap.id, ...data });
        }
    });

    callback(userGroups);
}

export async function deleteGroup(groupId) {
    console.log("üóëÔ∏è deleteGroup called with:", { groupId });
    
    const user = getAuth().currentUser;
    if (!user) throw new Error("User not logged in");
    
    const isAdmin = await isUserAdmin(groupId, user.uid);
    if (!isAdmin) {
        throw new Error("Only admins can delete groups");
    }
    
    try {
        await deleteDoc(doc(db, "groups", groupId));
        console.log("‚úÖ Group deleted successfully");
    } catch (error) {
        console.error("‚ùå Error in deleteGroup:", error);
        throw error;
    }
}

=====================================

STYLE.CSS:
body {
    margin: 0;
    padding: 0;
    font-family: 'Arial', sans-serif;
    background-color: #fef6e4;
    color: #001858;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

main {
    background-color: #ffffff;
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 90%;
    max-width: 400px;
}

h1 {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
}

#current-group-label,
#user-info {
    margin: 0.5rem 0;
    font-weight: bold;
}

#group-setup,
#chore-creation {
    margin: 1rem 0;
}

.group-button {
    padding: 10px 15px;
    border: none;
    background-color: #4CAF50;
    color: white;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
}

.group-button:hover {
    background-color: #45a049;
}

#group-setup input,
#chore-creation input {
    padding: 0.5rem;
    width: 70%;
    border-radius: 8px;
    border: 1px solid #ccc;
    margin-bottom: 0.5rem;
}

#group-setup button,
#chore-creation button,
#login-btn,
#logout-btn {
    background-color: #ffb703;
    color: #fff;
    border: none;
    padding: 0.6rem 1rem;
    margin: 0.3rem;
    font-size: 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

#group-setup button:hover,
#chore-creation button:hover,
#login-btn:hover,
#logout-btn:hover {
    background-color: #fb8500;
}

#chore-list {
    margin-top: 1.5rem;
    text-align: left;
}

.chore {
    background: #f3f3f3;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 12px;
    border-left: 6px solid #ffb703;
    transition: background 0.2s;
}

.chore:hover {
    background: #eaeaea;
}

.chore p {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
}

.chore button {
    background-color: #219ebc;
    color: white;
    border: none;
    padding: 0.6rem 1rem;
    font-size: 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.chore button:hover {
    background-color: #126782;
}

#group-list {
    margin-top: 1.5rem;
    text-align: left;
}

.group-entry {
    background: #f3f3f3;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 12px;
    border-left: 6px solid #4CAF50;
    transition: all 0.2s ease;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    color: #001858;
    display: block;
    text-decoration: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.group-entry:hover {
    background: #eaeaea;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* ==========================================================================
   CHORE LIST STYLING
   ========================================================================== */

#group-list .chore.group-entry {
    border-left: 6px solid #4CAF50 !important;
}

#group-list .delete-group-btn {
    background-color: #dc3545 !important;
    color: white !important;
    border: none !important;
    padding: 0.6rem 1rem !important;
    font-size: 1rem !important;
    border-radius: 8px !important;
    cursor: pointer !important;
    transition: background-color 0.2s !important;
    margin-top: 0.5rem !important;
}

#group-list .delete-group-btn:hover {
    background-color: #c82333 !important;
}

=====================================

PACKAGE.JSON:
{
  "dependencies": {
    "firebase": "^11.10.0"
  }
}

=====================================

FIREBASE RULES (for reference):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /groups/{groupId} {
      allow read: if true;
      allow write: if request.auth != null &&
                   request.auth.uid in resource.data.admins;
      allow create: if request.auth != null;
    }

    match /groups/{groupId}/chores/{choreId} {
      allow read: if request.auth != null &&
                  get(/databases/$(database)/documents/groups/$(groupId))
                    .data.members[request.auth.uid] != null;

      allow write, delete: if request.auth != null &&
                           get(/databases/$(database)/documents/groups/$(groupId))
                             .data.admins[request.auth.uid] == true;
    }
  }
}

=====================================

END OF CODE INDEX 